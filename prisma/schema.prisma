// generator and datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  calculations   Calculation[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain models
model Document {
  id          String         @id @default(cuid())
  userId      String?
  user        User?          @relation(fields: [userId], references: [id])
  originalUrl String?
  s3Key       String?
  status      DocumentStatus @default(uploaded)
  ocrText     String?        @db.Text
  parsedJson  Json?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum DocumentStatus {
  uploaded
  processing
  ready
  failed
}

model Calculation {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  inputsJson  Json
  resultsJson Json
  createdAt   DateTime @default(now())
}

model RatesCache {
  key       String   @id
  payload   Json
  expiresAt DateTime
}